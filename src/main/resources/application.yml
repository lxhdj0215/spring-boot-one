#zookeeper:
#  address: 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183
#  timeout: 4000


server:
  port: 8082

#spring:
#  datasource:
#    url: jdbc:mysql://localhost:3306/grocery_crm_bd
#    username: root
#    password: admin
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    hikari:
#      jdbc-url: jdbc:mysql://localhost:3306/grocery_crm_bd
#      username: root
#      password: admin
#      driver-class-name: com.mysql.cj.jdbc.Driver


#spring:
#  application:
#    name: dubbo-auto-configure-consumer-sample

# redis 配置
#spring:
#  redis:
#    cluster:
#      nodes: 192.168.10.7:7001,192.168.10.7:7002,192.168.10.7:7003
#      max-redirects: 3
#    timeout: 6000
#    jedis:
#      pool:
#        max-active: 8
#        max-idle: 8
#        max-wait: -1
#        min-idle: 0

#spring:
#  application:
#    name: kafka
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094 # kafka集群信息
##    bootstrap-servers: 127.0.0.1:9092 # kafka集群信息
#    producer: # 生产者配置
#      retries: 3 # 设置大于0的值，则客户端会将发送失败的记录重新发送
#      batch-size: 16384 #16K # 批量大小
#      buffer-memory: 33554432 #32M # 生产端缓冲区大小
#      acks: 1 # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
#      # 指定消息key和消息体的编解码方式
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#    consumer:
#      group-id: zhTestGroup # 消费者组
#      enable-auto-commit: false # 关闭自动提交
#      auto-offset-reset: earliest
#      # 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
#      # earliest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
#      # latest:当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
#      # none:topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
#      auto-commit-interval: 100  # 提交offset延时(接收到消息后多久提交offset)
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#    listener:
#      # 当每一条记录被消费者监听器（ListenerConsumer）处理之后提交
#      # RECORD
#      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交
#      # BATCH
#      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交
#      # TIME
#      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交
#      # COUNT
#      # TIME |　COUNT　有一个条件满足时提交
#      # COUNT_TIME
#      # 当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后, 手动调用Acknowledgment.acknowledge()后提交
#      # MANUAL
#      # 手动调用Acknowledgment.acknowledge()后立即提交，一般使用这种
#      # MANUAL_IMMEDIATE
#      ack-mode: manual_immediate